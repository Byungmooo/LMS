<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.gd.LMS.member.mapper.EmployeeMapper">
<sql id="search">
		<!-- 검색 키워드가 있을 때 -->
		<if test="keyword != null and keyword != ''">
			<choose>
				<!-- 검색 유형이 있을 때 -->
				<when test="searchType != null and searchType != ''">
					<choose>
						<when test="'code'.equals(searchType)"> AND empolyee_code LIKE CONCAT('%', #{keyword},
							'%') </when>
						<when test="'id'.equals(searchType)"> AND member_id LIKE CONCAT('%', #{keyword},
							'%') </when>
						<when test="'name'.equals(searchType)"> AND member_name LIKE CONCAT('%', #{keyword},
							'%') </when>
					</choose>
				</when>
				<!-- 전체 검색일 때 때 -->
				<otherwise> AND ( 
					empolyee_code LIKE CONCAT('%', #{keyword}, '%') OR
					member_id LIKE CONCAT('%', #{keyword}, '%') ) OR
					member_name LIKE CONCAT('%', #{keyword}, '%') ) </otherwise>
			</choose>
		</if>
	</sql>

	<!-- 총 직원수 출력 -->
	<select id="countEmployee"
		parameterType="map" resultType="int">
		SELECT COUNT(*) FROM employee 
			WHERE 1=1 
			<include refid="search" />
			AND 
			employee_code IS NOT NULL
	</select>
	
	<insert id ="insertEmployee" parameterType="com.gd.LMS.vo.Employee">
	<selectKey resultType="int" keyProperty="employeeCode" order="BEFORE">
			select MAX(employee_code) + 1 from employee
	</selectKey>
		INSERT INTO 
			employee(
				member_id,
				employee_code, 
				authority,
				employee_state
			) VALUES ( 
				#{memberId},	
				RPAD(#{employeeCode}, 8 , '0'),
				#{authority}, 
				#{employeeState}
				)

	</insert>
	
	<!-- 가입날짜 가져오기 -->
	<select id="selectDateEmployeeCode" parameterType="String" resultType="String">
		SELECT 
			create_date 
		FROM
		 	member
		WHERE 
		 	member_id = #{memberId}
	</select>
	
	
	
	<!-- 페이징 처리 후 리스트 -->
	<select id = "selectEmployeeList"  parameterType="map"
			resultType="map">
	SELECT 
		e.member_id memberId,
		m.member_name memberName,
		e.employee_code employeeCode,
		e.authority,
		e.employee_state employeeState
	FROM
		member m LEFT OUTER JOIN employee e 
	ON
		e.member_id = m.member_id
	WHERE 1=1
		<include refid="search" />
		AND e.employee_code IS NOT NULL
	ORDER BY
		e.employee_code
	LIMIT
		#{beginRow}, #{rowPerPage}
	</select>
	
	<!-- 직원상세보기 -->
	<select id ="selectEmployeeOne" resultType="map" parameterType="int">
	SELECT 
		e.member_id memberId,
		e.employee_code employeeCode,
		e.authority,
		e.employee_state employeeState,
		m.member_name memberName,
		m.member_gender memberGender,
		m.member_type memberType,
		m.member_birth memberBirth,
		m.member_email memberEmail,
		m.member_address memberAddress,
		m.member_contact memberContact,
		m.active,
		m.create_date createDate,
		m.update_date updateDate
	FROM 
		employee e inner join member m
	on
		e.member_id = m.member_id
	WHERE 
		e.employee_code = #{employeeCode}
	</select>

	<!-- 수정 form -->
	<select id="updateEmployeeOne" parameterType="int" resultType="map">
	SELECT 
		e.member_id memberId,
		e.employee_code employeeCode,
		e.authority,
		e.employee_state employeeState,
		m.member_name memberName,
		m.member_gender memberGender,
		m.member_type memberType,
		m.member_birth memberBirth,
		m.member_email memberEmail,
		m.member_address memberAddress,
		m.member_contact memberContact,
		m.active,
		m.create_date createDate
	FROM 
		employee e inner join member m
	on
		e.member_id = m.member_id
	Where 
		e.employee_code = #{employeeCode}
	</select>
	
	<!--  수정 액션 -->
	<update id="updateEmployee" parameterType="map">
		UPDATE 
			member m,
			employee e
		SET 
			e.employee_state = #{employeeState},
			e.authority = #{authority},
			m.member_name = #{memberName},
			m.member_gender= #{memberGender},
			m.member_birth= #{memberBirth},
			m.member_email = #{memberEmail},
			m.member_address = #{memberAddress},
			m.member_contact = #{memberContact},
			m.update_date = now()
		WHERE
			e.member_id = m.member_id AND
			e.employee_code = #{employeeCode}
	</update>
	
	
	
	<!-- 직원삭제 -->
	<delete id="deleteEmployeeMember" parameterType="String">
		DELETE FROM
			e  , m
		USING  
			employee AS e
		LEFT  JOIN
			member AS m
		ON 
			e.member_id = m.member_id
		WHERE 
			e.member_id = #{memberId}
	</delete>



	

</mapper>