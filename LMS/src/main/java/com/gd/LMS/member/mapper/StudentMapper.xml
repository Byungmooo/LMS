<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.gd.LMS.member.mapper.StudentMapper">
<sql id="search">
		<!-- 검색 키워드가 있을 때 -->
		<if test="keyword != ''">
			<choose>
				<!-- 검색 유형이 있을 때 -->
				<when test="searchType != ''">
					<choose>
						<when test="'code'.equals(searchType)"> AND student_code LIKE CONCAT('%', #{keyword},
							'%') </when>
						<when test="'id'.equals(searchType)"> AND member_id LIKE CONCAT('%', #{keyword},
							'%') </when>
					</choose>
				</when>
				<!-- 전체 검색일 때 때 -->
				<otherwise> AND ( 
					student_code LIKE CONCAT('%', #{keyword}, '%') OR
					member_id LIKE CONCAT('%', #{keyword}, '%') ) OR ) </otherwise>
			</choose>
		</if>
	</sql>

	<!-- 총 학생수 출력 -->
	<select id="countStudent"
		parameterType="map" resultType="int">
			SELECT COUNT(*) FROM student s, member m
			WHERE 1=1
				AND s.member_id = m.member_id
				AND student_code IS NOT NULL
				<include refid="search" />
	</select>
	

	<insert id ="insertStudent" parameterType="com.gd.LMS.vo.Student">
	<selectKey resultType="int" keyProperty="studentCode" order="BEFORE">
			select MAX(student_code) + 1 from student
	</selectKey>
		INSERT INTO 
			student (
				member_id,
				student_code, 
				department_code,
				student_year
			) VALUES ( 
				#{memberId},
				RPAD(#{studentCode}, 8 , '0'),
				#{departmentCode}, 
				#{studentYear}
				)

	</insert>
	
	<!-- 가입날짜 가져오기 -->
	<select id="selectDateStudentCode" parameterType="String" resultType="String">
		SELECT 
			create_date 
		FROM
		 	member
		WHERE 
		 	member_id = #{memberId}
	</select>
	
	
	
	<!-- 페이징 처리 후 리스트 -->
	<select id = "selectStudentList"  parameterType="map"
			resultType="map">
	SELECT 
		s.member_id memberId,
		s.student_code studentCode,
		s.department_code departmentCode,
		s.student_year studentYear,
		s.student_state studentState,
		m.member_name memberName
	FROM
		member m LEFT OUTER JOIN student s
	ON
		m.member_id = s.member_id
	WHERE 1=1
		<include refid="search" />
		AND s.student_code IS NOT NULL
	ORDER BY
		s.student_code
	LIMIT
		#{beginRow}, #{rowPerPage}
	</select>
	

	<!-- 학생정보 상세보기 -->
	<select id ="selectStudentOne" resultType="map" parameterType="int">
	SELECT 
		s.member_id memberId,
		s.student_code studentCode,
		s.department_code departmentCode,
		s.student_year studentYear,
		s.student_state studentState,
		m.member_name memberName,
		m.member_gender memberGender,
		m.member_type memberType,
		m.member_birth memberBirth,
		m.member_email memberEmail,
		m.member_address memberAddress,
		m.member_contact memberContact,
		m.active,
		m.create_date createDate,
		m.update_date updateDate
	FROM 
		student s ,
		member m
	Where 
		s.member_id = m.member_id AND
		s.student_code = #{studentCode}
	</select>
	
	
	
	<!-- 수정 form -->
	<select id="updateStudentOne" parameterType="int" resultType="map">
		SELECT 
		s.member_id memberId,
		s.student_code studentCode,
		d.department_code departmentCode,
		s.student_year studentYear,
		s.student_state studentState,
		m.member_name memberName,
		m.member_gender memberGender,
		m.member_type memberType,
		m.member_birth memberBirth,
		m.member_email memberEmail,
		m.member_address memberAddress,
		m.member_contact memberContact,
		m.active,
		m.create_date createDate,
		m.update_date updateDate
	FROM 
		student s ,
		member m ,
		department d
	Where 
		s.member_id = m.member_id AND
		d.department_code = s.department_code AND
		s.student_code = #{studentCode}
	</select>
	
	<!--  수정 액션 -->
	<update id="updateStudent" parameterType="map">
		UPDATE 
			member m,
			student s
		SET 
			s.student_year = #{studentYear},
			s.student_state = #{studentState},
			m.member_name = #{memberName},
			m.member_gender= #{memberGender},
			m.member_birth= #{memberBirth},
			m.member_email = #{memberEmail},
			m.member_address = #{memberAddress},
			m.member_contact = #{memberContact},
			m.update_date = now()
		WHERE
			s.member_id = m.member_id AND
			s.student_code = #{studentCode}
	</update>
	
	
	
	<!-- 학생삭제 -->
	<delete id="deleteStudentMember" parameterType="String">
			DELETE FROM
			s  , m
		USING  
			student AS s
		LEFT  JOIN
			member AS m
		ON 
			s.member_id = m.member_id
		WHERE 
			s.member_id = #{memberId}
	</delete>
	
	
 </mapper>