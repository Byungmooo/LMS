<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.gd.LMS.member.mapper.ProfessorMapper">
<sql id="search">
		<!-- 검색 키워드가 있을 때 -->
		<if test="keyword != null and keyword != ''">
			<choose>
				<!-- 검색 유형이 있을 때 -->
				<when test="searchType != null and searchType != ''">
					<choose>
						<when test="'code'.equals(searchType)"> AND professor_code LIKE CONCAT('%', #{keyword},
							'%') </when>
						<when test="'id'.equals(searchType)"> AND member_id LIKE CONCAT('%', #{keyword},
							'%') </when>
						<when test="'name'.equals(searchType)"> AND member_name LIKE CONCAT('%', #{keyword},
							'%') </when>
					</choose>
				</when>
				<!-- 전체 검색일 때 때 -->
				<otherwise> AND ( 
					professor_code LIKE CONCAT('%', #{keyword}, '%') OR
					member_id LIKE CONCAT('%', #{keyword}, '%') ) OR
					member_name LIKE CONCAT('%', #{keyword}, '%') ) </otherwise>
			</choose>
		</if>
	</sql>

	<!-- 총 교수 수 출력 -->
	<select id="countProfessor"
		parameterType="map" resultType="int">
		SELECT COUNT(*) FROM professor 
			WHERE 1=1 
			<include refid="search" />
			AND 
			professor_code IS NOT NULL
	</select>
	
	
	<insert id ="insertProfessor" parameterType="com.gd.LMS.vo.Professor">
		
		INSERT INTO 
			professor
				member_id,
				professor_code, 
				department_code,
				department_leader, 
				professor_state
			) VALUES ( 
				#{memberId},
				#{professorCode},
				#{departmentCode}, 
				#{departmentLeader}, 
				#{professorState}
				)

	</insert>
	
	
	
	<!-- 페이징 처리 후 리스트 -->
	<select id = "selectProfessorList"  parameterType="map"
			resultType="map">
	SELECT 
		p.member_id memberId,
		m.member_name memberName,
		p.professor_code professorCode,
		d.department_code departmentCode,
		p.department_leader departmentLeader,
		p.professor_state professorState
	FROM
		professor p , member m, department d
	WHERE 1=1
		<include refid="search" />
		AND p.professor_code IS NOT NULL
		AND p.member_id = m.member_id 
		AND d.department_code = p.department_code
	ORDER BY
		p.professor_code
	LIMIT
		#{beginRow}, #{rowPerPage}
	</select>
	

	<!-- 교수정보 상세보기 -->
	<select id ="selectProfessorOne" resultType="map" parameterType="int">
	SELECT 
		p.member_id memberId,
		p.professor_code professorCode,
		d.department_code departmentCode,
		p.department_leader departmentLeader,
		p.professor_state professorState,
		m.member_name memberName,
		m.member_gender memberGender,
		m.member_type memberType,
		m.member_birth memberBirth,
		m.member_email memberEmail,
		m.member_address memberAddress,
		m.member_contact memberContact,
		m.active,
		m.create_date createDate,
		m.update_date updateDate
	FROM 
		professor p, 
		member m,
		department d	
	Where 
		p.member_id = m.member_id AND
		d.department_code = p.department_code AND
		p.professor_code = #{professorCode}
	</select>
	
	
	
	<!-- 수정 form -->
	<select id="updateProfessorOne" parameterType="int" resultType="map">
		SELECT 
		p.member_id memberId,
		p.professor_code professorCode,
		d.department_code departmentCode,
		p.department_leader departmentLeader,
		p.professor_state professorState,
		m.member_name memberName,
		m.member_gender memberGender,
		m.member_type memberType,
		m.member_birth memberBirth,
		m.member_email memberEmail,
		m.member_address memberAddress,
		m.member_contact memberContact,
		m.active,
		m.create_date createDate
	FROM 
		professor p, 
		member m,
		department d	
	Where 
		p.member_id = m.member_id AND
		d.department_code = p.department_code AND
		p.professor_code = #{professorCode}
	</select>
	
	<!--  수정 액션 -->
	<update id="updateProfessor" parameterType="map">
		UPDATE 
			member m,
			professor p
		SET 
			p.department_leader = #{departmentLeader}, 
			p.professor_state = #{professorState},
			m.member_name = #{memberName},
			m.member_gender= #{memberGender},
			m.member_birth= #{memberBirth},
			m.member_email = #{memberEmail},
			m.member_address = #{memberAddress},
			m.member_contact = #{memberContact},
			m.update_date = now()
		WHERE
			p.member_id = m.member_id AND
			p.professor_code = #{professorCode}
	</update>
	
	
	
	<!-- 학생삭제 -->
	<delete id="deleteProfessorMember" parameterType="String">
			DELETE FROM
			p  , m
		USING  
			professor AS p
		LEFT  JOIN
			member AS m
		ON 
			p.member_id = m.member_id
		WHERE 
			p.member_id = #{memberId}
	</delete>
	


</mapper>