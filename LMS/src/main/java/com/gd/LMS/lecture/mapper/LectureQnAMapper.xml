<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.gd.LMS.lecture.mapper.LectureQnAMapper">
	  <!--  게시글 검색  -->
   <sql id="search">
      <!--  검색 키워드가 있을 때  -->
      <if test="keyword != null and keyword != ''">
         <choose>
         <!--  검색 유형이 있을 때  -->
            <when test="searchType != null and searchType != ''">
               <choose>
                  <when test="'title'.equals(searchType)"> 
                     AND notice_title LIKE CONCAT('%', #{keyword}, '%') 
                  </when>
                  <when test="'content'.equals(searchType)"> 
                     AND notice_content LIKE CONCAT('%', #{keyword}, '%') 
                  </when>
                  <when test="'writer'.equals(searchType)"> 
                     AND writer LIKE CONCAT('%', #{keyword}, '%') 
                  </when>
               </choose>
            </when>
            <!--  전체 검색일 때 때  -->
            <otherwise> 
               AND ( notice_title LIKE CONCAT('%', #{keyword}, '%') OR notice_content LIKE CONCAT('%', #{keyword}, '%') OR writer LIKE CONCAT('%', #{keyword}, '%') ) 
            </otherwise>
         </choose>
      </if>
   </sql>
     
     
        <!-- 총 게시글 갯수 출력 -->
   <select id="countBoard" parameterType="map" resultType="int">
      SELECT COUNT(*) FROM lecture_question WHERE 1=1 
      <include refid="search"/>
      AND opened_lec_no = #{openedLecNo}
   </select>
   
   <!-- 강의 질문리스트 페이징 처리 후 게시글 조회 -->
   <select id="selectBoard" parameterType="map" resultType="com.gd.LMS.vo.LectureQuestion">
      SELECT
         lec_question_no    lecQuestionNo,
         opened_lec_no        openedLecNo,
         notice_title     noticeTitle,
         notice_content   noticeContent,
         writer    writer,
         answer_y      answerY,
         create_date       createDate,
         update_date         updateDate
         
      FROM 
         lecture_question
      WHERE
         1=1 <include refid="search"/>
       AND opened_lec_no = #{openedLecNo}
      ORDER BY 
         lec_question_no
      LIMIT 
         #{beginRow}, #{rowPerPage}
   </select>

	
	<select id="selectLectureQuestionOne" parameterType="int" resultType="map"> 
		SELECT 
			q.lec_question_no lecQuestionNo, 
			t.lecture_name lectureName, 
			o.opened_lec_no openedLecNo, 
			q.notice_title noticeTitle,
			q.notice_content noticeContent, 
			q.writer, 
			q.answer_y answerY,
			q.create_date createDate 
		FROM 
			lecture_question q, 
			opened_lecture o,
			total_lecture t 
		WHERE 
			q.opened_lec_no = o.opened_lec_no AND
			o.lecture_code = t.lecture_code AND 
			lec_question_no = #{lecQuestionNo}
	</select>
	
	<!-- 질문게시판 답변여부 변경 -->
    <update id="answerStatus" parameterType="int">
        UPDATE
            lecture_question
        SET 
        	answer_y	  = 'y'
        WHERE lec_question_no  = #{lecQuestionNo}
    </update>    
    <!-- 답변 상세보기 -->
    	<select id="selectLectureAnswerOne" parameterType="int" resultType="map">
		SELECT
			a.lec_question_no lecQuestionNo,
			a.answer_content answerContent,
			a.create_date createDate,
			a.update_date updateDate
		FROM
			lecture_answer a
		WHERE
			lec_question_no = #{lecQuestionNo}
	</select>
    
    <!-- 질문 답변 추가 -->
    <insert id="addAnswer" parameterType="com.gd.LMS.vo.LectureAnswer">
      INSERT INTO lecture_answer( 
      			 lec_question_no,
      			 answer_content, 
      			 create_date,
      			 update_date 
      ) VALUES ( 
     			 #{lecQuestionNo},
      			 #{answerContent},
       			 now(),
       			 now() 
       ) 
     </insert>
    <!-- 답변 삭제 -->
    <delete id="deleteLecAnswer" parameterType="int">
        DELETE
        FROM lecture_answer
        WHERE lec_question_no  = #{lecQuestionNo}
    </delete>
       
       <!-- 학생 질문 추가 -->
	<insert id="addQuestion" parameterType="com.gd.LMS.vo.LectureQuestion">
	    INSERT INTO lecture_question( 
 			opened_lec_no,
 			notice_title, 
 			notice_content,
 			writer, 
 			create_date
	    ) VALUES ( 
 			#{openedLecNo},
			#{noticeTitle},
 			#{noticeContent},
 			#{writer},
  			now()    		
	     ) 
     </insert>
     	    <!-- 질문 수정 -->
    <update id="updateLecQuestion" parameterType="com.gd.LMS.vo.LectureQuestion">
		UPDATE
		    lecture_question
		SET 
			notice_title      = #{noticeTitle},
		    notice_content    = #{noticeContent},
		    update_date = now()
		WHERE 
			lec_question_no  = #{lecQuestionNo}
    </update>

    <!-- 질문 삭제 -->
    <delete id="deleteLecQuestion" parameterType="int">
        DELETE
        FROM lecture_question
        WHERE lec_question_no  = #{lecQuestionNo}
    </delete>
    
    
 	<!-- 답변체크 -->
    <select id="selectCheckFkLecQuestion" parameterType="int" resultType="String">
        SELECT
            lec_question_no
        FROM
            lecture_answer
        WHERE
            lec_question_no  = #{lecQuestionNo}
    </select>

</mapper>